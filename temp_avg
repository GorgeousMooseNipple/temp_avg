#! /usr/bin/env bash

# Parse options
while [[ $# -gt 0 ]]
do
    arg="$1"
    case $arg in 
        -d)
            delay=$2
            shift
            shift
        ;;
        -q)
            no_log=true
            shift
        ;;
        -a)
            append_log=true
            shift
        ;;
        -m)
            message=$2
            shift
            shift
        ;;
        *)
            echo $'\nUnknown argument '"$1"$'\n'
            exit 1
        ;;
    esac
done

# If delay is not provided as an argument or contains just an empty string
if [[ -z $delay ]]
then
    delay=30
fi

echo "Measuring cores temperature every $delay seconds..."
echo "Ctrl+C to stop and show results"

# If option -q is not used
if [[ -z $no_log ]]
then
    # Directory where this script file is located
    script_dir=$(dirname $(readlink -f $0))
    log_dir="$script_dir/logs_temp_avg"
    
    # If log_dir does not exist
    if [[ ! -e $log_dir ]];
    then
        mkdir $log_dir
    fi
    
    # Current date and time
    cur_datetime=$(date +%d-%m-%Y_%H-%M-%S)

    # If option -m was provided change log_file name accordingly
    if [[ -z $message ]]
    then
        log_file="$log_dir/log_$cur_datetime"
    else
        log_file="$log_dir/$message""_$cur_datetime"
    fi
    
    touch $log_file
fi

# Seconds from 1970 to now or something
start_time=$(date -u +%s)
start_time_readable=$(date +%H:%M:%S)

# Run this to calculate mean values and output results in stdout and log_file
on_exit() {
    echo $'\n' 

    end_time=$(date -u +%s)
    elapsed=$(($end_time - $start_time))
    hours_elapsed=$(echo "scale=4;$elapsed / (60 * 60)" | bc)
    # Round (floor)
    hours_elapsed=$(echo "scale=0;$hours_elapsed / 1" | bc)
    elapsed=$(echo "scale=4;$elapsed - $hours_elapsed * 60 * 60" | bc)
    minutes_elapsed=$(echo "scale=4;$elapsed / 60" | bc)
    # Round (floor)
    minutes_elapsed=$(echo "scale=0;$minutes_elapsed / 1" | bc)
    # Only seconds left in $elapsed at this point
    elapsed=$(echo "scale=4;$elapsed - $minutes_elapsed * 60" | bc)

    # If option -q is set then print timings to stdout and exit
    if [[ ! -z $no_log ]]
    then
        echo "Script ended at $(date +%H:%M:%S)"
        echo "Was taking measures for"
        echo "$hours_elapsed hours, $minutes_elapsed minutes, $elapsed seconds"
        exit 0
    fi

    # Number of cores - number of columns in the log file
    num_cores=$(head -n 1 "$log_file" | wc -w)
    # Initialize arrays with zeros
    for ((i=0; i < $num_cores; i++)); do sum_temps[$i]=0; done
    for ((i=0; i < $num_cores; i++)); do max_temps[$i]=0; done
    count_temps=0
    # Iterate over lines in the log_file
    while read line
    do
        # Set delimiter as \t and split line by it, creating array temps
        IFS=$'\t'; read -a temps<<<$line
        core_idx=0
        for t in "${temps[@]}"
        do
            sum_temps[$core_idx]=$(echo "${sum_temps[$core_idx]} + $t" | bc)
            if (( $(echo "$t > ${max_temps[$core_idx]}" | bc -l) )); then
                max_temps[$core_idx]="$t"
            fi
            ((++core_idx))
        done <<<$temps 
        ((++count_temps))
    done <$log_file

    # If -a option is not provided
    # replace values collected in log_file with results only. Also print to stdout using tee
    if [[ -z $append_log ]] then
        tee $log_file <<<"Script started at $start_time_readable"
    else
        tee -a $log_file <<<"Script started at $start_time_readable"
    fi

    core_idx=0
    # Calculate means in bc because bash can't work with floats
    for (( i=0; i < $num_cores; i++ ));
    do
        mean=$(echo "scale=4;${sum_temps[$i]} / $count_temps" | bc)
        tee -a $log_file <<<"Core $core_idx mean temp: $mean"
        tee -a $log_file <<<"Core $core_idx max temp: ${max_temps[$i]}"
        ((++core_idx))
    done

    tee -a $log_file <<<"Script ended at $(date +%H:%M:%S)"
    tee -a $log_file <<<"Was taking measures for"
    tee -a $log_file <<<"$hours_elapsed hours, $minutes_elapsed minutes, $elapsed seconds"
    exit 0
}

# Catch SIGINT and SIGTERM signals and run on_exit function
trap on_exit SIGINT SIGTERM

while true
do
    sensors_out=$(sensors)
    core_temps=$(sed -n "s/^Core [0-9]\+:\s\++\([0-9][0-9]\.[0-9]\).*$/\1/p" <<< $sensors_out)
    # Log core temperatures in file if -q option is not set
    if [[ -z $no_log ]]
    then
        log_line=""
        while IFS= read -r t;
        do
            log_line="$log_line$t\t"
        done <<< $core_temps
        # Remove trailing tab
        log_line="${log_line%\\t}"
        printf "$log_line\n" >> "$log_file"
    fi

    core_idx=0
    print_temps="\r"
    while IFS= read -r t;
    do
        print_temps="${print_temps}Core ${core_idx}: $t\xC2\xB0, "
        core_idx=$((++core_idx))
    done <<< "$core_temps"
    print_temps="${print_temps%\, }"
    
    printf "$print_temps"
    sleep $delay
done

